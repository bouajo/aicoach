"""
Manages dynamic prompt generation based on conversation state and context.
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from data.models import (
    ConversationState,
    UserProfile,
    ConversationMessage,
    DietPlan
)

logger = logging.getLogger(__name__)

class PromptManager:
    def __init__(self):
        # Message d'introduction d√©taill√©
        self.initial_greeting = (
            "Bonjour ! Je suis Eric, votre coach en nutrition personnalis√©. üëã\n\n"
            "Je suis l√† pour vous aider √† atteindre vos objectifs de mani√®re saine et durable. "
            "Pour cr√©er un programme adapt√© √† vos besoins, j'ai besoin de quelques informations :\n"
            "- Votre √¢ge\n"
            "- Votre taille\n"
            "- Votre poids actuel\n"
            "- Votre poids id√©al\n"
            "- Le temps que vous vous donnez pour l'atteindre\n\n"
            "Pour commencer, pouvez-vous me dire votre √¢ge ?"
        )

        # Prompts de base pour chaque √©tape
        self.system_prompts = {
            "base_identity": """
Tu es Eric, coach en nutrition professionnel. Tu collectes les informations de mani√®re naturelle et bienveillante.
- Sois empathique et √† l'√©coute
- Pose UNE SEULE question √† la fois
- Garde un ton amical mais professionnel
- Encourage et valorise chaque r√©ponse
""",
            "data_collection": {
                "age": {
                    "question": "Quel est votre √¢ge ?",
                    "validation": "Nombre entre 16 et 100",
                    "next": "height"
                },
                "height": {
                    "question": "Merci ! Et quelle est votre taille (en cm) ?",
                    "validation": "Nombre entre 140 et 220",
                    "next": "current_weight"
                },
                "current_weight": {
                    "question": "D'accord, et quel est votre poids actuel (en kg) ?",
                    "validation": "Nombre entre 40 et 250",
                    "next": "target_weight"
                },
                "target_weight": {
                    "question": "Tr√®s bien. Quel est votre objectif de poids (en kg) ?",
                    "validation": "Nombre entre 40 et 250",
                    "next": "target_date"
                },
                "target_date": {
                    "question": "Dans combien de mois souhaitez-vous atteindre cet objectif ?",
                    "validation": "Nombre entre 1 et 24",
                    "next": "summary"
                }
            },
            "data_validation": """
V√©rifie si la r√©ponse est valide selon les crit√®res.
Si non valide, explique gentiment pourquoi et redemande l'information.
Si valide, passe √† la question suivante avec une transition naturelle.
""",
            "summary_creation": """
Une fois toutes les informations collect√©es, cr√©e un r√©sum√© personnalis√© :
1. R√©capitule les informations fournies
2. Calcule l'IMC actuel
3. D√©termine si l'objectif est r√©aliste
4. Propose une approche adapt√©e
"""
        }

    def get_initial_greeting(self) -> str:
        """Retourne le message d'introduction initial."""
        return self.initial_greeting

    def get_data_collection_prompt(self, current_field: str, profile: UserProfile, last_answer: str = "") -> str:
        """
        G√©n√®re le prompt pour la collecte de donn√©es.
        """
        field_info = self.system_prompts["data_collection"].get(current_field, {})
        profile_summary = self._generate_profile_summary(profile)
        
        return f"""
{self.system_prompts['base_identity']}

√âtat actuel de la collecte :
{profile_summary}

Derni√®re r√©ponse de l'utilisateur : "{last_answer}"

Information √† collecter : {current_field}
Validation requise : {field_info.get('validation', 'N/A')}

Si la r√©ponse est valide :
- Stocke l'information
- Pose la question suivante : {field_info.get('question', 'Passez √† la suite')}

Si la r√©ponse n'est pas valide :
- Explique gentiment pourquoi
- Redemande l'information de mani√®re bienveillante
"""

    def get_summary_prompt(self, profile: UserProfile, diet_plan: Optional[DietPlan] = None) -> str:
        """
        G√©n√®re le prompt pour le r√©sum√© des informations collect√©es.
        """
        return f"""
{self.system_prompts['base_identity']}

{self.system_prompts['summary_creation']}

Profil complet :
{self._generate_profile_summary(profile)}

Plan alimentaire actuel :
{self._generate_diet_plan_summary(diet_plan)}

Cr√©e un r√©sum√© personnalis√© et propose la prochaine √©tape.
"""

    def _generate_profile_summary(self, profile: UserProfile) -> str:
        """G√©n√®re un r√©sum√© du profil utilisateur."""
        summary_parts = []
        
        if profile.age:
            summary_parts.append(f"- √Çge : {profile.age} ans")
        if profile.height_cm:
            summary_parts.append(f"- Taille : {profile.height_cm} cm")
        if profile.current_weight:
            summary_parts.append(f"- Poids actuel : {profile.current_weight} kg")
        if profile.target_weight:
            summary_parts.append(f"- Poids cible : {profile.target_weight} kg")
            
        return "\n".join(summary_parts) if summary_parts else "Aucune information collect√©e"

    def _generate_diet_plan_summary(self, diet_plan: Optional[DietPlan]) -> str:
        """G√©n√®re un r√©sum√© du plan alimentaire."""
        if not diet_plan:
            return "Plan non d√©fini"
            
        return f"Plan alimentaire : {diet_plan.calories_per_day} kcal/jour"

# Instance globale du PromptManager
prompt_manager = PromptManager()